var klass = require("hsp/klass");
var idCounter = 0;
var tplCtxt = new aria.templates.TemplateCtxt();
exports.tplCtxt = tplCtxt;
require("bridge/aria/Empty.tpl");
var atlasCtrl = require("bridge/hsp/atlas.hsp").bridge;
tplCtxt.initTemplate({classpath: "bridge.aria.Empty"}); // check if it can be done in a better
                                                                                // way
tplCtxt.getMarkup();
tplCtxt.linkToPreviousMarkup(document.createElement("div"));

var WidgetBridgeCtrl = klass({
    elements:{
        "atlas": { type: "component", controller: atlasCtrl }
    },
    attributes:{
        "id":{type:"string", binding:"1-way"}
    },
    $init: function () {
        if (this.id == "") {
            this.id = "atwidget_" + idCounter++;
        }
    },
    $afterRender: function() {
        debugger;

        var dependencies = [];
        for(var i=0, l=this.content.length; i<l; i++){
            var wgt = this.content[i];
            var dep = wgt.getWidgetDependencies();
            dependencies = dependencies.concat(dep);
        }

        Aria.load({
            classes : dependencies,
            oncomplete: {
                fn: this._afterLoad,
                scope: this
            }
        });


// this.loadSection();
    },

    _afterLoad: function (lib) {

        var out = new aria.templates.MarkupWriter(tplCtxt);
        for(var i=0, l=this.content.length; i<l; i++){
            var wgt = this.content[i];
            wgt.processWidgetMarkup(out);
        }

        this.section = out.getSection();
        tplCtxt._mainSection.addSubSection(this.section);
        var domElt = aria.utils.Dom.replaceHTML(this.id, this.section.html);
        this.section.setDom(domElt);
        aria.utils.Delegate.addExpando(domElt, this.section.delegateId);
        this.section.initWidgets();
    },

    $dispose: function () {
        this.disposeSection();
    },

    disposeSection: function () {
        if (this.section) {
            tplCtxt._mainSection.removeSubSection(this.section);
            this.section.$dispose();
            this.section = null;
        }
    },

    loadSection: function () {
         // $refresh?
        var lib = Aria.getClassRef(this.wlib);
        var dependencies = lib.getWidgetDependencies(this.name);
        Aria.load({
            classes : dependencies,
            oncomplete: {
                fn: this._afterLoad,
                args: lib,
                scope: this
            }
        });
    },

    reloadSection: function () {
        this.disposeSection();
        this.loadSection();
    },

    onConfigChange: function() {
        this.reloadSection();
    },

    onNameChange: function() {
        this.reloadSection();
    },

    onConfigChange: function() {
        this.reloadSection();
    }

});

# export template atlasSection using c:WidgetBridgeCtrl
    <div id="{c.id}">
    </div>
# /template